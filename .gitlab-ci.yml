stages:
  - build
  - scan
  - push
  - deploy
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Build Docker Images
build_image:
  image: docker:git
  stage: build
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - IMAGE_TAG="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA:0:7}-${CI_PIPELINE_IID}"
    - docker buildx build --platform linux/amd64 -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
  artifacts:
    reports:
      junit: report.xml
  only:
    - master

# OWASP Dependency Check
owasp_dependency_check:
  image: owasp/dependency-check:latest
  stage: scan
  script:
    - dependency-check.sh --project "Vidhya Project" --scan ./ --format "ALL" --out dependency-check-report
  artifacts:
    paths:
      - dependency-check-report
  only:
    - master

# Trivy Image Scan
trivy_scan:
  image: docker:git
  stage: scan
  services:
    - docker:dind
  before_script:
    - source image_tag.env
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - trivy image --format template --template "@contrib/html.tpl" -o trivy-report.html $CI_REGISTRY_IMAGE:$IMAGE_TAG
  artifacts:
    paths:
      - trivy-report.html
  only:
    - master

# Push Docker Images to GitLab Container Registry
push_image:
  image: docker:git
  stage: push
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG
  only:
    - master



# deploy_to_ec2:
#   image: alpine:latest
#   stage: deploy
#   before_script:
#     - apk add --no-cache openssh
#     - mkdir -p ~/.ssh
#     - echo "$EC2_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
#   script:
#     - ssh $EC2_USER@$EC2_HOST "helm upgrade --install vidhya ./vidhya-io-api/ -n vidhya-api --set image.tag=$IMAGE_TAG --set image.pullPolicy=Always"
#     - ssh $EC2_USER@$EC2_HOST " kubectl delete pods -l app=web -n vidhya-api --grace-period=30"
#     - ssh $EC2_USER@$EC2_HOST "kubectl delete pods -l app=redis -n vidhya-api --grace-period=30"
#   only:
#     - master
# Notify Results by Email
notify_results:
  image: alpine:latest
  stage: scan
  before_script:
    - apk add --no-cache msmtp ca-certificates mailx
    - echo "$SMTP_PASSWORD" | base64 -d > /etc/msmtprc
    - echo "account default" > /etc/msmtprc
    - echo "host $SMTP_HOST" >> /etc/msmtprc
    - echo "port $SMTP_PORT" >> /etc/msmtprc
    - echo "user $SMTP_USER" >> /etc/msmtprc
    - echo "passwordeval echo $SMTP_PASSWORD" >> /etc/msmtprc
    - echo "tls on" >> /etc/msmtprc
    - echo "tls_starttls on" >> /etc/msmtprc
    - echo "from $MAIL_FROM" >> /etc/msmtprc
  script:
    - echo -e "Subject:Security Scan Results for Build $CI_PIPELINE_ID\n\nOWASP Dependency Check and Trivy scan reports are attached." | msmtp --debug --from=$MAIL_FROM --to=$MAIL_TO
  only:
    - master
