stages:
  - build
  - scan
  - test
  - notify
  - deploy

# Build Docker Images
build_image:
  image: docker:git
  stage: build
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - IMAGE_TAG="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA:0:7}-${CI_PIPELINE_IID}"
    - echo "IMAGE_TAG=${IMAGE_TAG}" > image_tag.env
    - docker buildx build --platform linux/amd64 -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG
  artifacts:
    paths:
      - image_tag.env
  only:
    - master

# OWASP Dependency Check
owasp_dependency_check:
  image: owasp/dependency-check:latest
  stage: scan
  script:
    - dependency-check --scan . --format JSON --out dependency-check-report.json
    - ls -l
    - cat dependency-check-report.json || echo 'No results file found'
  artifacts:
    paths:
      - dependency-check-report.json
  only:
    - master

# Trivy Vulnerability Scanner
trivy_scan:
  stage: test
  image: debian:latest
  before_script:
    - apt-get update && apt-get install -y wget docker.io 
    - wget https://github.com/aquasecurity/trivy/releases/download/v0.54.1/trivy_0.54.1_Linux-64bit.tar.gz
    - tar zxvf trivy_0.54.1_Linux-64bit.tar.gz
    - service docker start
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - ./trivy image --severity CRITICAL --exit-code 0 --no-progress $CI_REGISTRY_IMAGE:$IMAGE_TAG -o trivy-results.json || { echo 'Trivy scan failed'; exit 1; }
    # - ./trivy --exit-code 1 --severity CRITICAL — no-progress — auto-refresh $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - ls -l
    - find . -name "*trivy-results*"
  artifacts:
    paths:
      - trivy-results.json
  allow_failure: true
  only:
    - master

# Notify Results by Email
notify_results:
  image: alpine:latest
  stage: notify
  before_script:
    - apk add --no-cache msmtp ca-certificates mailx
    - echo "$SMTP_PASSWORD" | base64 -d > /etc/msmtprc
    - echo "account default" > /etc/msmtprc
    - echo "host $SMTP_HOST" >> /etc/msmtprc
    - echo "port $SMTP_PORT" >> /etc/msmtprc
    - echo "user $SMTP_USER" >> /etc/msmtprc
    - echo "passwordeval echo $SMTP_PASSWORD" >> /etc/msmtprc
    - echo "tls on" >> /etc/msmtprc
    - echo "tls_starttls on" >> /etc/msmtprc
    - echo "from $MAIL_FROM" >> /etc/msmtprc
    - cat /etc/msmtprc  # Debug output to check configuration
  script:
    - |
      if [ -f dependency-check-report ] && [ -f trivy-results.sarif ]; then
        {
          echo "Subject: Security Scan Results for Build $CI_PIPELINE_ID"
          echo "From: $MAIL_FROM"
          echo "To: $MAIL_TO"
          echo
          echo "OWASP Dependency Check and Trivy scan reports are attached."
        } | msmtp --debug --from=$MAIL_FROM --to=$MAIL_TO -a default

        uuencode dependency-check-report dependency-check-report | msmtp --debug --from=$MAIL_FROM --to=$MAIL_TO -a default -s "OWASP Dependency Check Report"
        uuencode trivy-results.sarif trivy-results.sarif | msmtp --debug --from=$MAIL_FROM --to=$MAIL_TO -a default -s "Trivy Scan Results"
      else
        {
          echo "Subject: No Reports Found for Build $CI_PIPELINE_ID"
          echo "From: $MAIL_FROM"
          echo "To: $MAIL_TO"
          echo
          echo "Reports not found, skipping email notification."
        } | msmtp --debug --from=$MAIL_FROM --to=$MAIL_TO -a default
      fi
  artifacts:
    paths:
      - trivy-results.json
  only:
    - master

# # # Deploy to EC2
# deploy_to_ec2:
#   image: alpine:latest
#   stage: deploy
#   before_script:
#     - apk add --no-cache openssh
#     - mkdir -p ~/.ssh
#     - echo "$EC2_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
#   script:
#     - ssh $EC2_USER@$EC2_HOST "sed -i 's/tag: .*/tag: $IMAGE_TAG/g' ./vidhya-io-api/values.yml"
#     - ssh $EC2_USER@$EC2_HOST "helm upgrade --install vidhya ./vidhya-io-api/ -n vidhya-api --set image.tag=$IMAGE_TAG --set image.pullPolicy=Always"
#   only:
#     - master